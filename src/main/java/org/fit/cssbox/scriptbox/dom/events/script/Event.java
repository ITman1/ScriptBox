/**
 * Event.java
 * (c) Radim Loskot and Radek Burget, 2013-2014
 *
 * ScriptBox is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *  
 * ScriptBox is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *  
 * You should have received a copy of the GNU Lesser General Public License
 * along with ScriptBox. If not, see <http://www.gnu.org/licenses/>.
 * 
 */

package org.fit.cssbox.scriptbox.dom.events.script;

import org.apache.xerces.dom.events.EventImpl;
import org.fit.cssbox.scriptbox.dom.events.EventTarget;
import org.fit.cssbox.scriptbox.script.annotation.ScriptClass;
import org.fit.cssbox.scriptbox.script.annotation.ScriptFunction;
import org.fit.cssbox.scriptbox.script.annotation.ScriptGetter;

/**
 * Represents pure script visible event class.
 * 
 * @author Radim Loskot
 * @version 0.9
 * @since 0.9 - 21.4.2014
 * @see <a href="http://www.w3.org/TR/dom/#interface-event">Event interface</a>
 */
@ScriptClass
public class Event extends EventImpl {
	/* TODO: Final fields are not supported yet by engine */
	final static short NONE  = 0;
	final static short CAPTURING_PHASE  = 1;
	final static short AT_TARGET        = 2;
	final static short BUBBLING_PHASE   = 3;
	
	public boolean isTrusted;
	public EventTarget targetOverride;
	
	public boolean stopImmediatePropagation;
	public boolean canceled;
	public boolean dispatch;
		
	public Event() {
		this(true, null);
	}
	
	public Event(boolean isTrusted, EventTarget targetOverride) {
		this.isTrusted = isTrusted;
		this.targetOverride = targetOverride;
	}
	
	/**
	 * Tests whether is this event trusted or not.
	 * 
	 * @return True if was this event generated by user agent, otherwise false.
	 * @see <a href="http://www.w3.org/TR/dom/#dom-event-istrusted">DOM event - istrusted</a>
	 */
	@ScriptGetter
	public boolean getIsTrusted() {
		return isTrusted;
	}
	
	/**
	 * Returns target which will be visible and set inside this event 
	 * when event is fired/dispatched, but a real target a different one.
	 * 
	 * @return Target which is set inside event on place of the real target.
	 */
	public EventTarget getTargetOverride() {
		return targetOverride;
	}
	

	/**
	 * @see <a href="http://www.w3.org/TR/dom/#dom-event-type">DOM event type</a>
	 */
	@ScriptGetter
	@Override
	public String getType() {
		return super.type;
	}
	
	/**
	 * @see <a href="http://www.w3.org/TR/dom/#dom-event-target">DOM event target</a>
	 */
	@ScriptGetter
	@Override
	public org.w3c.dom.events.EventTarget getTarget() {
		return super.target;
	}
	
	/**
	 * @see <a href="http://www.w3.org/TR/dom/#dom-event-currenttarget">DOM event current target</a>
	 */
	@ScriptGetter
	@Override
	public org.w3c.dom.events.EventTarget getCurrentTarget() {
		return super.currentTarget;
	}
	
	/**
	 * @see <a href="http://www.w3.org/TR/dom/#dom-event-eventphase">DOM event phase</a>
	 */
	@ScriptGetter
	@Override
	public short getEventPhase() {
		return super.eventPhase;
	}
	
	/**
	 * @see <a href="http://www.w3.org/TR/dom/#dom-event-bubbles">DOM event bubbles</a>
	 */
	@ScriptGetter
	@Override
	public boolean getBubbles() {
		return super.bubbles;
	}
	
	/**
	 * @see <a href="http://www.w3.org/TR/dom/#dom-event-cancelable">DOM event cancelable</a>
	 */
	@ScriptGetter
	@Override
	public boolean getCancelable() {
		return super.cancelable;
	}
	
	/**
	 * Tests whether was this event set prevent default.
	 * 
	 * @return True if the canceled flag is set, otherwise false.
	 * @see <a href="http://www.w3.org/TR/dom/#dom-event-defaultprevented">DOM event default prevented</a>
	 */
	@ScriptGetter
	public boolean getDefaultPrevented() {
		return super.preventDefault;
	}
	
	/**
	 * @see <a href="http://www.w3.org/TR/dom/#dom-event-timestamp">DOM event timestamp</a>
	 */
	@ScriptGetter
	@Override
	public long getTimeStamp() {
		return super.getTimeStamp();
	}
	
	/**
	 * @see <a href="http://www.w3.org/TR/dom/#dom-event-stoppropagation">Stop propagation</a>
	 */
	@ScriptFunction
	@Override
	public void stopPropagation() {
		super.stopPropagation();
	}
	
	/**
	 * Stops immediate propagation.
	 * 
	 * @see <a href="http://www.w3.org/TR/dom/#dom-event-stopimmediatepropagation">Stop immediate propagation</a>
	 */
	@ScriptFunction
	public void stopImmediatePropagation() {
		stopPropagation = true;
		stopImmediatePropagation = true;
	}
	
	/**
	 * @see <a href="http://www.w3.org/TR/dom/#dom-event-preventdefault">DOM event prevent default</a>
	 */
	@ScriptFunction
	@Override
	public void preventDefault() {
		super.preventDefault();
	}
	
	/**
	 * @see <a href="http://www.w3.org/TR/dom/#dom-event-initevent">DOM init event</a>
	 */
	@ScriptFunction
	@Override
	public void initEvent(String eventTypeArg, boolean canBubbleArg, boolean cancelableArg) {
		if (!dispatch) {
			super.initEvent(eventTypeArg, canBubbleArg, cancelableArg);
		}
	}
	
	@ScriptFunction
	@Override
	public String toString() {
		return "[object Event]";
	}
}
